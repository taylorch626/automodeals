/* eslint-disable */
// This is the list of values required for each event
function isMobile() {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
    navigator.userAgent
  );
}
function isDesktop() {
  return !isMobile();
}
/**
 * dataLayerConfig.events controls the values that get pushed to the dataLayer object.
 * This is an example of all the values available to date.
 *
 * @type {
 *   {
 *     eventName: {
 *       selector: string,
 *       eventCategory: string,
 *       eventAction: string,
 *       eventActionSuffix: string,
 *       eventLabel: string, function
 *       loginRequired: boolean
 *     }
 *   }
 * }
 *
 */

var dataLayerConfig = {
  /**
   * This is a stupid work around for now until we hopefully re write this in the future
   * In the future I pray that we no longer have hard coded strings for predefined data layer data such as the things below
   * It is also possible that this isn't a complete list
   */
  retainCasing: ['Map Dealership', 'Vehicle Video Start'],
  /**
   * This is an array of objects that have 2 properties that are functions
   *    [{
   *      before: optional function to call before waiting for the dependency
   *      loaded: function to check if your dependencies have loaded
   *      callback: optional function to call when your dependencies have loaded
   *    }]
   */
  loadDependencies: {
    ga: {
      loaded: function () {
        return window.ga && ga.getAll;
      }
    },
    purchase: {
      loaded: function () {
        var mouseover = document.querySelector(".addthis_button_compact")
          .onmouseover;
        var buttons = document.querySelectorAll(".atm-i #at_hover > a");
        if (mouseover && !buttons.length) {
          mouseover();
        }
        return buttons.length > 7;
      },
      callback: function () {
        var addThisBtns = document.querySelectorAll(".atm-i #at_hover > a"),
          classes;

        for (var i = 0; i < addThisBtns.length; i++) {
          addThisBtns[i].setAttribute("data-coupon", "AddThis");
          if (addThisBtns[i].className) {
            classes = addThisBtns[i].className.split(" ");
            classes.push("data-layer-purchase");
            addThisBtns[i].className = classes.join(" ");
          } else {
            addThisBtns[i].setAttribute("class", "data-layer-purchase");
          }
        }
      }
    },
    dfp: {
      before: function () {
        // because focus needs to be on the page :( #ihateiframes
        var mainArea = document.querySelector("body");

        mainArea.focus();
        mainArea.click();
      },
      loaded: function (eventName) {
        return document.querySelector(
          dataLayerConfig.events[eventName].selector
        );
      },
      callback: function (eventName) {
        var eventObj = dataLayerConfig.events[eventName];
        var elem = document.querySelector(eventObj.selector);

        addEventListener("blur", function () {
          if (document.activeElement === elem) {
            dataLayerHelper.pushEvent(eventObj);
            // iframes son el diablo
            setTimeout(function () {
              elem.blur();
              elem.offsetParent.focus();
              elem.offsetParent.click();
            }, 100);
          }
        });
      }
    }
  },
  templates: {
    eventGA: {
      event: "trigger-ga-event",
      eventAction: "",
      eventCategory: "",
      eventLabel: ""
    },
    productClick: {
      event: "productClick",
      ecommerce: {
        click: {
          actionField: { list: "srp" },
          products: [
            {
              name: "productObj.name",
              id: "productObj.id",
              price: "productObj.price",
              brand: "productObj.brand",
              category: "productObj.cat",
              variant: "productObj.variant",
              position: "productObj.position"
            }
          ]
        }
      }
    },
    productDetail: {
      event: "product-detail",
      ecommerce: {
        detail: {
          actionField: { list: "VDP Listing" },
          products: []
        }
      }
    }
  },
  events: {
    addThis: {
      selector: '[class^="addthis_button_"]',
      eventCategory: "User Engagement",
      eventAction: "AddThis"
    },
    dealerVideoPlays: {
      selector: null,
      eventCategory: "User Engagement",
      eventAction: "Dealer Video Start",
      eventActionSuffix: ""
    },
    vehicleVideoPlays: {
      selector: null,
      eventCategory: "User Engagement",
      eventAction: "Vehicle Video Start",
      eventActionSuffix: ""
    },
    addThisVDP: {
      selector: "[data-coupon=AddThis]:not(.addthis_button_compact,#atic_more)",
      eventCategory: function ($obj, dataLayerInstance, customEventData) {
        var isEmail = $obj.hasClass("addthis_button_email");
        var isPrint = $obj.attr("id") === "atic_print";
        if (isEmail) {
          return "addthis|email";
        } else if (isPrint) {
          return "print|detail";
        }
        return "addthis|top";
      },
      eventAction: function ($obj, dataLayerInstance) {
        var isEmail = $obj.hasClass("addthis_button_email");
        var isPrint = $obj.attr("id") === "atic_print";
        if (isEmail) {
          return "cars";
        } else if (isPrint) {
          var make = dataLayerHelper.get("pageDetails", "Make") || "";
          var model = dataLayerHelper.get("pageDetails", "Model") || "";
          return make + "|" + model;
        }
        return window.location.href;
      },
      eventActionSuffix: "",
      eventLabel: function ($obj, dataLayerInstance) {
        var brand = $obj.attr("class").match(/addthis_button_(\S*)(_share)?/);
        var favoriteHeart = $(
          "a.save_favorite.icon--heart,a.save_favorite.icon--weighted-heart"
        ),
          sellerId = favoriteHeart.attr("data-seller-id"),
          adId = favoriteHeart.attr("data-id");

        if (!brand) {
          brand = $obj.attr("id").match(/atic_(\S*)(_share)?/);
        }
        if (brand) {
          brand = brand[1].replace("_share", "");
        }

        if (brand === "email" || brand === "print") {
          return (
            (dataLayerInstance.userId === "not specified"
              ? ""
              : dataLayerInstance.userId) +
            "|" +
            sellerId +
            "|" +
            adId
          );
        }
        return (
          brand + "|" + dataLayerInstance.userId + "|" + sellerId + "|" + adId
        );
      }
    },
    addThisVDPPrint: {
      selector: "[data-coupon=Print]",
      eventCategory: "print|detail",
      eventAction: function ($obj, dataLayerInstance) {
        var make = dataLayerHelper.get("pageDetails", "Make") || "";
        var model = dataLayerHelper.get("pageDetails", "Model") || "";
        return make + "|" + model;
      },
      eventActionSuffix: "",
      eventLabel: function ($obj, dataLayerInstance) {
        var favoriteHeart = $(
          "a.save_favorite.icon--heart,a.save_favorite.icon--weighted-heart"
        ),
          sellerId = favoriteHeart.attr("data-seller-id"),
          adId = favoriteHeart.attr("data-id");
        return (
          (dataLayerInstance.userId === "not specified"
            ? ""
            : dataLayerInstance.userId) +
          "|" +
          sellerId +
          "|" +
          adId
        );
      }
    },
    addThisVDPPopup: {
      selector: "[class*=at3winsvc_]",
      eventCategory: function ($obj, dataLayerInstance) {
        var brand = $obj
          .attr("class")
          .match(/at3winsvc_(\S*)(_share)?/)[1]
          .replace("_share", "");
        if (brand === "print") {
          return "print|detail";
        }
        return "addthis|top";
      },
      eventAction: function ($obj, dataLayerInstance) {
        var brand = $obj
          .attr("class")
          .match(/at3winsvc_(\S*)(_share)?/)[1]
          .replace("_share", "");
        if (brand === "print") {
          var make = dataLayerHelper.get("pageDetails", "Make") || "";
          var model = dataLayerHelper.get("pageDetails", "Model") || "";
          return make + "|" + model;
        }
        return window.location.href;
      },
      eventActionSuffix: "",
      eventLabel: function ($obj, dataLayerInstance) {
        var brand = $obj
          .attr("class")
          .match(/at3winsvc_(\S*)(_share)?/)[1]
          .replace("_share", "");
        var favoriteHeart = $(
          "a.save_favorite.icon--heart,a.save_favorite.icon--weighted-heart"
        ),
          sellerId = favoriteHeart.attr("data-seller-id"),
          adId = favoriteHeart.attr("data-id");

        if (brand === "print") {
          return (
            (dataLayerInstance.userId === "not specified"
              ? ""
              : dataLayerInstance.userId) +
            "|" +
            sellerId +
            "|" +
            adId
          );
        }

        return (
          brand + "|" + dataLayerInstance.userId + "|" + sellerId + "|" + adId
        );
      }
    },
    browseBodyTypeClick: {
      selector:
        '.browse-by-body-type, [data-reactid*="tab-button-widgetBodyType"]',
      eventCategory: "Search",
      eventAction: "Jump Link",
      eventLabel: "Browse Body Type"
    },
    calculatePaymentClick: {
      selector: '[aria-label="Calculate your payment"] > div > iframe',
      eventCategory: "User Engagement",
      eventAction: "Payment Calculator Start"
    },
    calculatePaymentSubmitClick: {
      selector: "#pc_calculate",
      eventCategory: "User Engagement",
      eventAction: "cars",
      eventActionSuffix: function ($obj, dataLayerInstance) {
        var params = dataLayerInstance.getFormData(
          $("form.payment-calculator")
        );
        var detail = params
          .map(function (el) {
            return el.value.replace(/[&\/\\#,+()$~%'":*?<>{}]/g, "");
          })
          .filter(function (el) {
            return el !== null;
          })
          .join("|");
        return detail;
      }
    },
    seeMoreListingsClick: {
      selector: ".see-more-listings > a.button",
      eventCategory: "see more listings",
      eventAction: "cars",
      eventActionSuffix: "",
      eventLabel: "homepage"
    },
    tradeInValetClick: {
      selector:
        ".vdp-contact-info .trade_in_valet_modal_link, .tradeInValet__link",
      eventCategory: "trade in valet",
      eventAction: "open",
      eventActionSuffix: "",
      eventLabel: function ($obj, dataLayerInstance) {
        var sellerId =
          dataLayerInstance.sellerId ||
          $obj.attr("data-seller-id") ||
          $obj[0].params.sellerId,
          adId =
            dataLayerInstance.adId ||
            $obj.attr("data-id") ||
            $obj[0].params.adId;
        return (
          (dataLayerInstance.userId != "not specified"
            ? dataLayerInstance.userId
            : "") +
          "|" +
          sellerId +
          "|" +
          adId
        );
      }
    },
    tradeInValetClickTop: {
      selector: ".info-section-link--tiv .trade_in_valet_modal_link",
      eventCategory: "trade in valet",
      eventAction: "open|Top link beneath Carfax",
      eventActionSuffix: "",
      eventLabel: function ($obj, dataLayerInstance) {
        var sellerId =
          dataLayerInstance.sellerId ||
          $obj.attr("data-seller-id") ||
          $obj[0].params.sellerId,
          adId =
            dataLayerInstance.adId ||
            $obj.attr("data-id") ||
            $obj[0].params.adId;
        return (
          (dataLayerInstance.userId != "not specified"
            ? dataLayerInstance.userId
            : "") +
          "|" +
          sellerId +
          "|" +
          adId
        );
      }
    },
    addThis: {
      selector: '[class^="addthis_button_"]',
      eventCategory: "User Engagement",
      eventAction: "AddThis"
    },
    browseBodyTypeClick: {
      selector:
        '.browse-by-body-type, [data-reactid*="tab-button-widgetBodyType"]',
      eventCategory: "Search",
      eventAction: "Jump Link",
      eventLabel: "Browse Body Type"
    },
    calculatePaymentClick: {
      selector: '[aria-label="Calculate your payment"] > div > iframe',
      eventCategory: "User Engagement",
      eventAction: "Payment Calculator Start"
    },
    calculatePaymentSubmitClick: {
      selector: "#pc_calculate",
      eventCategory: "User Engagement",
      eventAction: "cars",
      eventActionSuffix: function ($obj, dataLayerInstance) {
        var params = dataLayerInstance.getFormData(
          $("form.payment-calculator")
        );
        var detail = params
          .map(function (el) {
            return el.value.replace(/[&\/\\#,+()$~%'":*?<>{}]/g, "");
          })
          .filter(function (el) {
            return el !== null;
          })
          .join("|");
        return detail;
      }
    },
    callFeatured: {
      selector: '.featured-listing-dealer-options a[href^="tel:"]',
      eventCategory: "Contact Seller",
      eventAction: "Call",
      eventLabel: function ($obj, dataLayerInstance) {
        return (
          dataLayerInstance.userId +
          "|" +
          $obj.attr("data-seller-id") +
          "|" +
          $obj.attr("data-id")
        );
      }
    },
    callListing: {
      selector: '.vdp-contact-info a[href^="tel:"]',
      eventCategory: "Contact Seller",
      eventAction: "Call"
    },
    mapDealership: {
      selector: "#map_dealership_link",
      eventCategory: "User Engagement",
      eventAction: "Map Dealership",
      eventLabel: function ($obj, dataLayerInstance) {
        return (
          dataLayerInstance.userId +
          "|" +
          $obj.attr("data-seller-id") +
          "|" +
          $obj.attr("data-id")
        );
      }
    },
    carfaxFeatured: {
      selector: ".featured-listing-car-fax a.link",
      eventCategory: "User Engagement",
      eventAction: "CarFax",
      eventActionSuffix: "Featured",
      eventLabel: function ($obj, dataLayerInstance) {
        return (
          dataLayerInstance.userId +
          "|" +
          $obj.attr("data-seller-id") +
          "|" +
          $obj.attr("data-id")
        );
      }
    },
    carfaxListing: {
      selector: ".listing-carfax .info-section-link--dl a.link",
      eventCategory: "User Engagement",
      eventAction: "CarFax",
      eventActionSuffix: "Listing"
    },
    carfaxVin: {
      selector: "#widgetSpecifications a.carfax.link",
      eventCategory: "User Engagement",
      eventAction: "CarFax",
      eventActionSuffix: "VIN"
    },
    carouselClick: {
      selector: ".jcarousel-item-image > a, .jcarousel-item-caption > a",
      eventCategory: "user engagement",
      eventAction: "carousel",
      eventActionSuffix: (function () {
        var suffix = "cars|";
        if (eventPage == "search.index") {
          suffix += "featured";
        } else if (eventPage == "listing.index") {
          suffix += "detail page";
        }
        return suffix;
      })(),
      eventLabel: function ($obj, dataLayerInstance) {
        var listingToData = JSON.parse(
          $obj.closest("li[data-listing]").attr("data-listing")
        );
        var listingFromData = "";

        if (eventPage === "listing.index") {
          listingFromData = JSON.parse($(".main-column").attr("data-listing"));
        } else if (eventPage === "search.index") {
          listingFromData = JSON.parse(
            $(".featured-listing-main").attr("data-listing")
          );
        }
        // current page ad data
        var fromAd = listingFromData.id,
          // carousel item data
          mid = listingToData.memberId,
          toAd = listingToData.id;

        return dataLayerInstance.userId + "|" + mid + "|" + fromAd + "|" + toAd;
      }
    },
    chatClick: {
      selector: ".contact-at-once-link, .cao-integration",
      eventCategory: "contact seller",
      eventAction: "chat",
      eventLabel: function ($obj, dataLayerInstance) {
        return (
          dataLayerInstance.userId +
          "|" +
          $obj.attr("data-seller-id") +
          "|" +
          $obj.attr("data-id")
        );
      }
    },
    saveSearchClick: {
      selector:
        ".ResultsPageHeader__button--save, .ResultsPageHeader__button.save-search",
      eventCategory: "save search|create start",
      eventAction: "button click|set an alert",
      eventActionSuffix: "",
      eventLabel: function ($obj, dataLayerInstance) {
        return dataLayerInstance.userId;
      }
    },
    saveSearchSuccess: {
      getEvent: function (helper, xhr, xhrSettings) {
        var dataStr = decodeURIComponent(xhrSettings.data);
        var alert = dataStr.indexOf("alert=true") > -1 ? "true" : "false";
        var match = dataStr.match(/deliveryMethods=({[\:\w\"{},]+})/, "g");
        var frequency;
        if (match.length === 2 && alert === "true") {
          try {
            var alertSettings = JSON.parse(match[1]);
            frequency = alertSettings.email.frequency;
          } catch (e) {
            frequency = "not specified";
          }
        } else {
          frequency = "not specified";
        }
        var eventAction =
          (xhr.responseJSON.status == 1
            ? xhr.responseJSON.result.id
            : "not specified") +
          "|" +
          alert +
          "|" +
          frequency;
        return {
          event: "trigger-ga-event",
          eventCategory: "save search|create success",
          eventAction: eventAction,
          eventLabel: helper.userId
        };
      },
      url: "/favorite/add-saved-search/format/json"
    },
    saveSearchCancel: {
      selector: null,
      eventCategory: "save search|create cancel",
      eventAction: "button click",
      eventActionSuffix: "",
      eventLabel: function ($obj, dataLayerInstance) {
        return dataLayerInstance.userId;
      }
    },
    emailStart: {
      conditional: function () {
        return loggedIn;
      },
      selector: ".vdp-contact-info a.email_seller_modal_link",
      eventCategory: "user engagement",
      eventAction: "email start"
    },
    emailSubmit: {
      url: "/listing/email-seller/",
      eventCategory: "contact seller",
      eventAction: "email submit"
    },
    reportSubmit: {
      selector: "#safety-tip-submit",
      eventCategory: "report abuse|submit",
      eventAction: function ($obj, dataLayerInstance) {
        var params = dataLayerInstance.getFormData($(".safety-tip-modal form"));

        var detail = params
          .map(function (el) {
            if (
              el.name === "fraud" ||
              el.name === "badinfo" ||
              el.name === "duplicate" ||
              el.name === "inappropriate" ||
              el.name === "miscategorized"
            ) {
              return el.name.toLowerCase();
            }
            return null;
          })
          .filter(function (el) {
            return el !== null;
          })
          .sort()
          .join("|");
        return detail;
      },
      eventActionSuffix: "",
      eventLabel: function ($obj, dataLayerInstance) {
        var data = JSON.parse($(".main-column").attr("data-listing"));
        return (
          (dataLayerInstance["userId"] || "") +
          "|" +
          data.memberId +
          "|" +
          data.id
        );
      },
      conditional: function () {
        var form = $(".safety-tip-modal form");
        return [
          "fraud",
          "badinfo",
          "duplicate",
          "inappropriate",
          "miscategorized"
        ].reduce(function (result, option) {
          return (
            result ||
            form.find("[type=checkbox][name=" + option + "]").is(":checked")
          );
        }, false);
      }
    },
    reportStart: {
      selector: ".flag-ad.button",
      eventCategory: "report abuse|open",
      eventAction: "cars|web",
      eventActionSuffix: "",
      eventLabel: function ($obj, dataLayerInstance) {
        return (
          (dataLayerInstance["userId"] || "") +
          "|" +
          $obj.attr("data-seller-id") +
          "|" +
          $obj.attr("data-id")
        );
      }
    },
    emailCancel: {
      // selector: '.email_seller_modal .icon-close',
      selector: null,
      eventCategory: "contact seller|email cancel",
      eventAction: "cars",
      eventActionSuffix: "",
      eventLabel: function ($obj, dataLayerInstance) {
        return (
          dataLayerInstance.userId +
          "|" +
          $obj.attr("data-seller-id") +
          "|" +
          $obj.attr("data-id")
        );
      }
    },
    favorited: {
      conditional: function () {
        return loggedIn;
      },
      selector:
        ".save_favorite.heart-weighted, .save_favorite.icon--heart, .save_favorite.icon--weighted-heart-empty",
      eventCategory: function ($obj, dataLayerInstance) {
        return "favorited|" + dataLayerInstance.getPageName();
      },
      eventAction: "cars",
      eventActionSuffix: "",
      eventLabel: function ($obj, dataLayerInstance, event) {
        /**
         * in this case $obj is either an element reference or a custom event with params wrapped in jquery
         * to access the params the 0 index needs to be used to get the original event
         * then the params object with all the info can be accessed
         */
        var sellerId =
          dataLayerInstance.sellerId ||
          $obj.attr("data-seller-id") ||
          $obj[0].params.sellerId,
          adId =
            dataLayerInstance.adId ||
            $obj.attr("data-id") ||
            $obj[0].params.adId;
        return dataLayerInstance.userId + "|" + sellerId + "|" + adId;
      }
    },
    moreOptionsClick: {
      selector: "a.more-options-link.inactive",
      eventCategory: "more search options|expand",
      eventAction: "cars",
      eventActionSuffix: "",
      eventLabel: function ($obj, dataLayerInstance) {
        return dataLayerInstance.userId;
      }
    },
    fewerOptionsClick: {
      selector: "a.more-options-link.active",
      eventCategory: "more search options|close",
      eventAction: "cars",
      eventActionSuffix: "",
      eventLabel: function ($obj, dataLayerInstance) {
        return dataLayerInstance.userId;
      }
    },
    financingClick: {
      selector: '[aria-label="Vehicle Financing"] > div > iframe',
      eventCategory: "User Engagement",
      eventAction: "Financing"
    },
    findADealerClick: {
      selector: "a.find-a-dealer.link.modal-toggle",
      eventCategory: "find a dealer|open",
      eventAction: "cars",
      eventActionSuffix: "",
      eventLabel: function ($obj, dataLayerInstance) {
        return dataLayerInstance.userId || "not specified";
      }
    },
    findADealerCancel: {
      selector:
        ".find-a-dealer-modal .icon--close,.find-a-dealer-modal .cancel.icon-close",
      eventCategory: "find a dealer|cancel",
      eventAction: "cars",
      eventActionSuffix: "",
      eventLabel: function ($obj, dataLayerInstance) {
        return dataLayerInstance.userId || "not specified";
      }
    },
    findADealerSubmit: {
      selector: ".find-a-dealer-modal button",
      eventCategory: "find a dealer|success",
      eventAction: "cars",
      eventActionSuffix: "",
      eventLabel: function ($obj, dataLayerInstance) {
        var $form = $(".find-a-dealer-modal.modal-open .ddm-modal__body form");
        var fieldNames = [
          "zip",
          "miles",
          "make",
          "model",
          "trim",
          "yearFrom",
          "yearTo"
        ];

        return (
          (dataLayerInstance.userId || "") +
          "|" +
          fieldNames
            .map(function (name) {
              return $form.find(":input[name=" + name + "]").val();
            })
            .join("|")
        );
      }
    },
    inspectionClick: {
      selector: '[aria-label="Vehicle Inspection"] > div > iframe',
      eventCategory: "User Engagement",
      eventAction: "Inspection"
    },
    insuranceClick: {
      selector: '[aria-label="Vehicle Insurance"] > div > iframe',
      eventCategory: "User Engagement",
      eventAction: "Insurance"
    },
    moreDescriptionClick: {
      selector: "#moreLessLink>a.more",
      eventCategory: "User Engagement",
      eventAction: "Read More"
    },
    moreSpecsClick: {
      selector: "a#expandSpecsLink",
      eventCategory: "User Engagement",
      eventAction: "Read More Specs"
    },
    newestListingsClick: {
      selector:
        '.newest-listings, [data-reactid*="tab-button-widgetNewestListings"]',
      eventCategory: "Search",
      eventAction: "Jump Link",
      eventLabel: "Newest Listings"
    },
    printed: {
      selector: "a.icon--printer",
      eventCategory: "Contact Seller",
      eventAction: "Print"
    },
    resultsPerPageChange: {
      selector: "#perPage",
      eventType: "change",
      eventCategory: "Engagement",
      eventAction: "Results Per Page",
      eventLabel: function ($obj, dataLayerInstance) {
        var val = dataLayerInstance.getDropdownValueOptions($obj);
        return val.value + " Results Per Page";
      }
    },
    sortChange: {
      selector: "#sort",
      eventType: "change",
      eventCategory: "Engagement",
      eventAction: "Sort",
      eventLabel: function ($obj, dataLayerInstance) {
        var val = dataLayerInstance.getDropdownValueOptions($obj);
        return val.options[val.value];
      }
    },
    spotlightsLoaded: {
      url: "/search/get-spotlights/format/json",
      getEvent: function (helper, xhr) {
        setTimeout(function () {
          dataLayerHelper.setImpressions("search.index", "spotlights-loaded");
        }, 500);
        return null;
      }
    },
    text: {
      selector: '.vdp-contact-info a[href^="sms:"]',
      eventCategory: "Contact Seller",
      eventAction: "Text"
    },
    visitDealerSiteClick: {
      selector: ".visit-dealer-site-link",
      eventCategory: "Conversion",
      eventAction: "Visit Website",
      eventLabel: function ($obj, dataLayerInstance) {
        return (
          dataLayerInstance.userId +
          "|" +
          $obj.attr("data-seller-id") +
          "|" +
          $obj.attr("data-id")
        );
      }
    },
    warrantyClick: {
      selector: '[aria-label="Vehicle Warranty"] > div > iframe',
      eventCategory: "User Engagement",
      eventAction: "Warranty"
    },
    carfaxCheckbox: {
      selector: "input#carfax_cost_checkbox",
      eventCategory: "Carfax Upgrade",
      eventAction: function ($obj) {
        return $obj.is(":checked") ? "Select" : "Unselect";
      },
      eventActionSuffix: "",
      eventLabel: "CARFAX Vehicle Report - $34.99"
    },
    featuredAdCheckbox: {
      selector: "input#check-featured-ad",
      eventCategory: "Featured Ad Upgrade",
      eventAction: function ($obj) {
        return $obj.is(":checked") ? "Select" : "Unselect";
      },
      eventActionSuffix: "",
      eventLabel: "Featured Listing $10 Day"
    },
    viewAllOfMyListingsClick: {
      selector: ".extra-links .viewAll-listings",
      eventCategory: "View All of My Listings",
      eventAction: "Cars",
      eventActionSuffix: function ($obj, dataLayerInstance) {
        return "Browser|" + dataLayerInstance.ddmPageviewId;
      },
      eventLabel: function ($obj, dataLayerInstance) {
        return (
          dataLayerInstance.userId +
          "|" +
          $obj.attr("data-seller-id") +
          "|" +
          $obj.attr("data-id")
        );
      }
    },
    viewListingClick: {
      selector: ".extra-links .view-listing",
      eventCategory: "View Listing",
      eventAction: "Cars",
      eventActionSuffix: function ($obj, dataLayerInstance) {
        return "Browser|" + dataLayerInstance.ddmPageviewId;
      },
      eventLabel: function ($obj, dataLayerInstance) {
        return (
          dataLayerInstance.userId +
          "|" +
          $obj.attr("data-seller-id") +
          "|" +
          $obj.attr("data-id")
        );
      }
    },
    editListingClick: {
      selector: ".extra-links .edit-listing",
      eventCategory: "Edit Listing",
      eventAction: "Cars",
      eventActionSuffix: function ($obj, dataLayerInstance) {
        return "Browser|" + dataLayerInstance.ddmPageviewId;
      },
      eventLabel: function ($obj, dataLayerInstance) {
        return (
          dataLayerInstance.userId +
          "|" +
          $obj.attr("data-seller-id") +
          "|" +
          $obj.attr("data-id")
        );
      }
    },
    featureListingClick: {
      selector: ".feature-listing",
      eventCategory: "Feature Listing",
      eventAction: "Cars",
      eventActionSuffix: function ($obj, dataLayerInstance) {
        return "Browser|" + dataLayerInstance.ddmPageviewId;
      },
      eventLabel: function ($obj, dataLayerInstance) {
        return (
          dataLayerInstance.userId +
          "|" +
          $obj.attr("data-seller-id") +
          "|" +
          $obj.attr("data-id")
        );
      }
    },
    noThanksPostMyAdClick: {
      conditionalRecord: function () {
        return !window.recordEvent;
      },
      selector:
        "#submit_s2, #submit_s2_purchase, .upgrade-your-ad .inline.ksl_info.link--forward",
      eventCategory: "ad posted|cars",
      eventAction: function () {
        return translateDetailsKeys(gaPostDetails);
      },
      eventActionSuffix: function ($obj, dataLayerInstance) {
        return "";
      },
      eventLabel: function ($obj, dataLayerInstance) {
        return dataLayerInstance.userId + "|" + window.listingId;
      }
    },
    editListingSuccess: {
      conditionalRecord: function () {
        return window.recordEvent;
      },
      selector:
        "#submit_s2, #submit_s2_purchase, .upgrade-your-ad .inline.ksl_info.link--forward",
      eventCategory: "edit listing|success",
      eventAction: function ($obj, dataLayerInstance) {
        return "cars";
      },
      eventActionSuffix: function ($obj, dataLayerInstance) {
        return "";
      },
      eventLabel: function ($obj, dataLayerInstance) {
        return dataLayerInstance.userId + "|" + window.listingId;
      }
    },
    editListing: {
      eventCategory: "edit listing",
      eventActionSuffix: "", // force cars without '|Cars' to be the eventAction
      eventAction: "cars",
      get eventLabel() {
        return dataLayerHelper.userId + "|" + window.listingId;
      }
    },
    moreAdsBySellerLinkClick: {
      selector: "#moreAdsBySellerLink,.carousel-viewall .link.link--forward",
      eventCategory: "more by seller|cars",
      eventAction: function ($obj, dataLayerInstance) {
        var data = JSON.parse($(".main-column").attr("data-listing"));
        return data.make.toLowerCase() + "|" + data.model.toLowerCase();
      },
      eventActionSuffix: "",
      eventLabel: function ($obj, dataLayerInstance) {
        var data = JSON.parse($(".main-column").attr("data-listing"));
        return dataLayerInstance.userId + "|" + data.memberId + "|" + data.id;
      }
    },
    galleryOpen: {
      selector: ".view-larger.link, #widgetPhoto .flexslider.main",
      eventCategory: "photo gallery|open",
      eventAction: "cars",
      eventActionSuffix: "",
      eventLabel: function ($obj, dataLayerInstance) {
        var data = JSON.parse($(".main-column").attr("data-listing"));
        return (
          (dataLayerInstance.userId === "not specified"
            ? ""
            : dataLayerInstance.userId) +
          "|" +
          data.memberId +
          "|" +
          data.id
        );
      },
      conditional: function () {
        return isDesktop();
      }
    },
    galleryView: {
      eventType: "customGAClick",
      eventCategory: "photo gallery|view",
      eventAction: function (eventData, dataLayerInstance) {
        var photoArray = sessionStorage.getItem(
          dataLayerInstance.adId + "-photos"
        );
        //console.log('eventData', eventData)
        photoArray = photoArray && photoArray.split(";");
        return photoArray[eventData.nextIndex - 1] || "";
      },
      eventActionSuffix: "",
      eventLabel: function (eventData, dataLayerInstance) {
        return (
          dataLayerInstance.userId +
          "|" +
          dataLayerInstance.sellerId +
          "|" +
          dataLayerInstance.adId
        );
      }
    },
    setupAlertClick: {
      selector: ".LandingPage__button:first-child",
      eventCategory: "saved search|setup an alert button",
      eventAction: "click",
      eventActionSuffix: "",
      eventLabel: function ($obj, dataLayerInstance) {
        return dataLayerInstance.userId || "not specified";
      }
    },
    downloadAppClick: {
      selector: ".LandingPage__button--download",
      eventCategory: "saved search|download the app button",
      eventAction: "click",
      eventActionSuffix: "",
      eventLabel: function ($obj, dataLayerInstance) {
        return dataLayerInstance.userId || "not specified";
      }
    },
    impressionClick: {
      conditionalRecord: function () {
        return window.recordEvent || true;
      },
      selector:
        ".featured-listing-main[data-listing], #jcarousel .jcarousel-item[data-listing], .listing[data-listing], .spotlight.listing[data-listing]",
      ecommerce: {
        click: {
          actionField: {
            list: function (ecommObj, dataLayerInstance) {
              var pagesMap = {
                "listing.index": "detail",
                "index.index": "homepage",
                "search.index": "srp"
              },
                list = ecommObj.inlineSpotlight ? "spotlight" : "srp";

              if (eventPage == "listing.index" || eventPage == "index.index") {
                return pagesMap[eventPage];
              }

              // for SRP we have two cases
              // check for featured ad itself or carousel
              // this may be changed to !listing['dealerOptions'] only
              // if add dealerOptions to whole Featured Ad block
              if (
                $(".featured-listing-main[data-id=" + ecommObj.id + "]")
                  .length ||
                $("#jcarousel .jcarousel-item[data-id=" + ecommObj.id + "]")
                  .length
              ) {
                list = "featured";
              }
              return list;
            }
          },
          products: [
            {
              name: function (ecommObj, dataLayerInstance) {
                return dataLayerInstance.getListingName(ecommObj);
              },
              id: function (ecommObj, dataLayerInstance) {
                return (
                  (dataLayerInstance.userId || "") +
                  "|" +
                  ecommObj.memberId +
                  "|" +
                  ecommObj.id
                );
              },
              price: function (ecommObj, dataLayerInstance) {
                return ecommObj.price;
              },
              brand: function (ecommObj, dataLayerInstance) {
                return "Cars";
              },
              category: function (ecommObj, dataLayerInstance) {
                var dealerOptions;
                if (ecommObj.dealerOptions === null) {
                  // regular listings FSBO
                  return "FSBO";
                } else if (typeof ecommObj.dealerOptions === "undefined") {
                  // carousel
                  dealerOptions = JSON.parse(
                    $("#widgetCarousel").attr("data-dealer-options")
                  );
                } else {
                  // regular listings Dealership or Featured Ad
                  dealerOptions = ecommObj.dealerOptions;
                }
                return dataLayerInstance.getListingContentType(dealerOptions);
              },
              variant: function (ecommObj, dataLayerInstance) {
                var isFeatured = false,
                  isSpotlight = false,
                  dealerOptions = {},
                  priceReduced = false,
                  priceReducedOffset = 14 * 24 * 60 * 60; // 14 days in seconds

                // first define if it's a carousel item
                if (
                  $("#widgetCarousel").length &&
                  ($(".featured-listing-main[data-id=" + ecommObj.id + "]")
                    .length ||
                    $("#jcarousel .jcarousel-item[data-id=" + ecommObj.id + "]")
                      .length)
                ) {
                  isFeatured = true;
                }

                if (
                  $(".spotlight.listing[data-id=" + ecommObj.id + "]").length
                ) {
                  isSpotlight = true;
                }

                if (isFeatured) {
                  dealerOptions = JSON.parse(
                    $("#widgetCarousel").attr("data-dealer-options")
                  );

                  priceReduced = isset(
                    dealerOptions,
                    "options.priceReduced",
                    true
                  );
                } else {
                  priceReduced = isset(
                    ecommObj,
                    "dealerOptions.options.priceReduced",
                    true
                  );
                }
                if (isSpotlight) {
                  // priceReduced for spotlights comes ready from backend
                  priceReduced = ecommObj.priceReduced;
                } else {
                  // for non-spotlighted ads have to figure out priceReduced

                  // unfortunately we have two cases here
                  if (isset(ecommObj, "reducedPriceStartDate.sec")) {
                    console.log(
                      "isset(ecommObj, reducedPriceStartDate.sec",
                      ecommObj.reducedPriceStartDate
                    );

                    priceReduced =
                      priceReduced &&
                      ecommObj.reducedPriceStartDate &&
                      ecommObj.reducedPriceStartDate["sec"] +
                      priceReducedOffset >=
                      new Date().getTime() / 1000; // in seconds
                  } else {
                    //console.log('else reducedPriceStartDate', ecommObj.reducedPriceStartDate)
                    priceReduced =
                      priceReduced &&
                      ecommObj["reducedPriceStartDate"] &&
                      Date.parse(ecommObj["reducedPriceStartDate"]) +
                      priceReducedOffset * 1000 >=
                      new Date().getTime(); // in milliseconds
                  }
                }

                return (
                  ecommObj.sellerType.toLowerCase() +
                  (ecommObj["standardFeatured"] ||
                    ecommObj["regularFeatured"] ||
                    isFeatured
                    ? "|featured"
                    : "") +
                  (ecommObj["inlineSpotlight"] ? "|spotlight" : "") +
                  (priceReduced ? "|price reduced" : "")
                );
              },
              position: function (ecommObj, dataLayerInstance) {
                return ecommObj.index;
              }
            }
          ]
        }
      },
      template: "productClick"
    },
    impressionListingHomepage: {
      selector: ".listing[data-listing]",
      template: {
        brand: "Cars",
        list: "homepage",
        // TODO: think about removing unused params
        // TODO: these templates so similar, there should be a way to unify them even more
        name: function (listing, dataLayerInstance) {
          return dataLayerInstance.getListingName(listing);
        },
        id: function (listing, dataLayerInstance) {
          return (
            (dataLayerInstance.userId || "") +
            "|" +
            listing.memberId +
            "|" +
            listing.id
          );
        },
        price: function (listing, dataLayerInstance) {
          return listing.price;
        },
        category: function (listing, dataLayerInstance) {
          return dataLayerInstance.getListingContentType(listing.dealerOptions);
        },
        variant: function (listing, dataLayerInstance) {
          return (
            listing.sellerType +
            (listing.standardFeatured ? "|featured" : "") +
            (listing.inlineSpotlight ? "|spotlight" : "")
          );
        },
        position: function (listing, dataLayerInstance) {
          return listing.index;
        }
      }
    },
    impressionListingSRPWhole: {
      selector:
        ".featured-listing-main[data-listing], #jcarousel .jcarousel-item[data-listing], .listing[data-listing]",
      template: {
        brand: "Cars",
        list: function (listing, dataLayerInstance) {
          var list = "srp";

          // check for featured ad itself or carousel
          // this may be changed to !listing['dealerOptions'] only
          // if add dealerOptions to whole Featured Ad block
          if (
            $(".featured-listing-main[data-id=" + listing.id + "]").length ||
            $("#jcarousel .jcarousel-item[data-id=" + listing.id + "]").length
          ) {
            list = "featured";
          } else if (listing.inlineSpotlight) {
            list = "spotlight";
          }
          return list;
        },
        // TODO: think about removing unused params
        name: function (listing, dataLayerInstance) {
          return dataLayerInstance.getListingName(listing);
        },
        id: function (listing, dataLayerInstance) {
          return (
            (dataLayerInstance.userId || "") +
            "|" +
            listing.memberId +
            "|" +
            listing.id
          );
        },
        price: function (listing, dataLayerInstance) {
          return listing.price;
        },
        category: function (listing, dataLayerInstance) {
          var dealerOptions;

          if (listing["dealerOptions"] === null) {
            // regular listings FSBO
            return "FSBO";
          } else if (typeof listing["dealerOptions"] === "undefined") {
            // carousel
            dealerOptions = JSON.parse(
              $("#widgetCarousel").attr("data-dealer-options")
            );
          } else {
            // regular listings Dealership or Featured Ad
            dealerOptions = listing.dealerOptions;
          }
          return dataLayerInstance.getListingContentType(dealerOptions);
        },
        variant: function (listing, dataLayerInstance) {
          var isFeatured = false,
            dealerOptions = null,
            priceReduced = false;
          var priceReducedOffset = 14 * 24 * 60 * 60; // 14 days in seconds

          // first define if it's a carousel item
          if (
            $("#widgetCarousel").length &&
            ($(".featured-listing-main[data-id=" + listing.id + "]").length ||
              $("#jcarousel .jcarousel-item[data-id=" + listing.id + "]")
                .length)
          ) {
            isFeatured = true;
          }

          if (isFeatured) {
            dealerOptions = JSON.parse(
              $("#widgetCarousel").attr("data-dealer-options")
            );

            priceReduced = isset(dealerOptions, "options.priceReduced", true);
          } else {
            priceReduced = isset(
              listing,
              "dealerOptions.options.priceReduced",
              true
            );
          }
          priceReduced =
            priceReduced &&
            listing.reducedPriceStartDate &&
            Date.parse(listing.reducedPriceStartDate) +
            priceReducedOffset * 1000 >=
            new Date().getTime(); // in milliseconds

          return (
            listing.sellerType +
            (listing["standardFeatured"] ||
              listing["regularFeatured"] ||
              isFeatured
              ? "|featured"
              : "") +
            (listing["inlineSpotlight"] ? "|spotlight" : "") +
            (listing.priceReduced || priceReduced ? "|price reduced" : "")
          );
        },
        position: function (listing, dataLayerInstance) {
          return listing.index;
        }
      }
    },
    impressionListingDetailCarousel: {
      selector: "#jcarousel .jcarousel-item[data-listing]",
      template: {
        brand: "Cars",
        list: "detail",
        name: function (listing, dataLayerInstance) {
          return dataLayerInstance.getListingName(listing);
        },
        id: function (listing, dataLayerInstance) {
          return (
            (dataLayerInstance.userId || "") +
            "|" +
            listing.memberId +
            "|" +
            listing.id
          );
        },
        price: function (listing, dataLayerInstance) {
          return listing.price;
        },
        category: function (listing, dataLayerInstance) {
          var dealerOptions = JSON.parse(
            $("#widgetCarousel").attr("data-dealer-options")
          );
          return dataLayerInstance.getListingContentType(dealerOptions);
        },
        variant: function (listing, dataLayerInstance) {
          var priceReducedOffset = 14 * 24 * 60 * 60; // 14 days in seconds
          var dealerOptions = JSON.parse(
            $("#widgetCarousel").attr("data-dealer-options")
          );
          var priceReduced =
            isset(dealerOptions, "options.priceReduced", true) &&
            listing.reducedPriceStartDate &&
            Date.parse(listing.reducedPriceStartDate) +
            priceReducedOffset * 1000 >=
            new Date().getTime();

          return (
            listing.sellerType +
            (listing.standardFeatured ? "|featured" : "") +
            (listing.inlineSpotlight ? "|spotlight" : "") +
            (priceReduced ? "|price reduced" : "")
          );
        },
        position: function (listing, dataLayerInstance) {
          return listing.index;
        }
      }
    },
    productDetail: {
      onload: true,
      selector: ".main-column[data-listing]",
      ecommerce: {
        detail: {
          actionField: null,
          products: [
            {
              name: function (ecommObj, dataLayerInstance) {
                return dataLayerInstance.getListingName(ecommObj);
              },
              id: function (ecommObj, dataLayerInstance) {
                return dataLayerInstance.eventLabel;
              },
              price: function (ecommObj, dataLayerInstance) {
                return ecommObj.price;
              },
              brand: function (ecommObj, dataLayerInstance) {
                return "Cars";
              },
              category: function (ecommObj, dataLayerInstance) {
                return dataLayerInstance.getListingContentType(
                  ecommObj.dealerOptions
                );
              },
              variant: function (ecommObj, dataLayerInstance) {
                // price reduced, spotlight, featured
                var priceReducedOffset = 14 * 24 * 60 * 60; // 14 days in seconds

                //                console.log('productDetail variant', ecommObj)

                var result = ecommObj.sellerType,
                  key = "srp-listing-flags-" + ecommObj.id,
                  flagData = sessionStorage.getItem(key),
                  featured = "",
                  spotlight = "",
                  // this is how it's checked in a page view
                  priceReduced =
                    isset(
                      ecommObj,
                      "dealerOptions.options.priceReduced",
                      true
                    ) &&
                    ecommObj.reducedPriceStartDate &&
                    ecommObj.reducedPriceStartDate + priceReducedOffset >=
                    new Date().getTime() / 1000;

                result += priceReduced ? "|price reduced" : "";

                if (flagData) {
                  flagData = JSON.parse(flagData);
                  // check if click event timestamp within 10 seconds (data stored in ms)
                  if (new Date().getTime() - flagData.timestamp < 10 * 1000) {
                    result += flagData["featured"] ? "|featured" : "";
                    result += flagData["spotlight"] ? "|spotlight" : "";
                  }
                }
                return result;
              }
            }
          ]
        }
      },
      template: "productDetail"
    },
    purchase: {
      selector: ".data-layer-purchase:not(.icon--weighted-heart)",
      ecommerce: {
        purchase: {
          actionField: (function () {
            var counter = 0;
            return function (coupon) {
              counter++;
              return {
                // dataLayerHelper.eventLabel = User MID|Dealership MID|Ad Id
                id: dataLayerHelper.eventLabel + "|" + counter,
                coupon: coupon + "|Cars"
              };
            };
          })(),
          products: (function () {
            var products;

            return function () {
              if (!products) {
                for (var i = 0; i < dataLayer.length; i++) {
                  // instead of some convoluted method to find out which index in the dataLayer array
                  //    the ecommerce detail products is just try and catch the "No property ecommerce of undefined"
                  //    exception until it is found.
                  try {
                    if (dataLayer[i].ecommerce.detail.products) {
                      products = dataLayer[i].ecommerce.detail.products;
                      break;
                    }
                  } catch (e) { }
                }
              }

              return products;
            };
          })()
        }
      },
      template: "purchase"
    },
    postListingStep2: {
      selector: '#submit_s1',
      conditional: function() {
        return !window.sellFormHasErrors; //set in React -> Sell form -> StatesStore
      },
      getEvent: function (helper) {
        //This is like a single page app new page event
        var dLI = Object.assign({}, dataLayerInitialized);
        dLI.pageDetails = Object.assign({}, dLI.pageDetails, {'Site Section 2': 'upgrade'});
        return dLI;
      }
    }
  }
};

/**
 * This is a map of which page gets assigned which events
 */
var pages = {
  "listing.index": {
    events: [
      "callListing",
      "text",
      "emailStart",
      "emailCancel",
      "mapDealership",
      "reportStart",
      "carfaxListing",
      "carfaxVin",
      "addThisVDP",
      "addThisVDPPrint",
      "addThisVDPPopup",
      "chatClick",
      "favorited",
      "printed",
      "calculatePaymentSubmitClick",
      "visitDealerSiteClick",
      "moreSpecsClick",
      "moreDescriptionClick",
      "carouselClick",
      "moreAdsBySellerLinkClick",
      "impressionClick",
      "reportSubmit",
      // ecommerce
      "productDetail",
      "purchase",
      "tradeInValetClick",
      "tradeInValetClickTop",
      "galleryOpen",
      "galleryViewMobile"
    ],
    ajaxEvents: ["emailSubmit"],
    dfpEvents: [
      "calculatePaymentClick",
      "inspectionClick",
      "financingClick",
      "insuranceClick",
      "warrantyClick"
    ],
    impressions: ["impressionListingDetailCarousel"],
    loadDeps: ["ga", "purchase", "dfp"]
  },
  "listing.email-seller": {
    events: ["emailSubmit"],
    loadDeps: ["ga"]
  },
  "photo.index": {
    events: ["addThis" /*, 'galleryViewDesktop'*/],
    loadDeps: ["ga"]
  },
  "listing.videos": {
    events: ["addThis", "vehicleVideoPlays", "dealerVideoPlays"],
    loadDeps: ["ga"]
  },
  "listing.trade-in-valet": {
    events: [],
    loadDeps: ["ga"]
  },
  "sell.index": {
    events: [
      "carfaxCheckbox",
      "featuredAdCheckbox",
      "noThanksPostMyAdClick",
      "editListingSuccess",
      "postListingStep2"
    ],
    loadDeps: ["ga"]
  },
  "sell.submit": {
    events: [
      "viewAllOfMyListingsClick",
      "viewListingClick",
      "editListingClick",
      "featureListingClick",
      "tradeInValetClick"
    ],
    loadDeps: ["ga"]
  },
  "index.index": {
    events: [
      "favorited",
      "findADealerClick",
      "findADealerSubmit",
      "moreOptionsClick",
      "fewerOptionsClick",
      "newestListingsClick",
      "browseBodyTypeClick",
      "impressionClick",
      "seeMoreListingsClick"
    ],
    impressions: ["impressionListingHomepage"],
    loadDeps: ["ga"]
  },
  "search.index": {
    events: [
      "callFeatured",
      "carfaxFeatured",
      "chatClick",
      "favorited",
      "visitDealerSiteClick",
      "carouselClick",
      "sortChange",
      "resultsPerPageChange",
      "impressionClick",
      "saveSearchClick",
      "saveSearchCancel" // probably it may work without being listed here
    ],
    ajaxEvents: ["spotlightsLoaded", "saveSearchSuccess"],
    impressions: ["impressionListingSRPWhole"],
    //    impressions: ['impressionListingSRP']
    loadDeps: ["ga"],
    spotlights: true
  },
  "dealer-search.index": {
    events: [],
    loadDeps: ["ga"]
  },
  "landing.saved-search": {
    events: ["setupAlertClick", "downloadAppClick"],
    loadDeps: ["ga"]
  },
  "error404.listing-error": {
    impressions: [],
    events: [],
    loadDeps: ["ga"]
  }
};

/**
 * Map of full dealer options name to it's shorthand so it can fit within the character limit
 *
 * @type {Object} dealerOptionsMap - key: full name; value: shorthand name
 */
var dealerOptionsMap = {
  VDPcarousel: "VCar",
  allowUsed: "Usd",
  calculator: "Clc",
  carFaxIntegration: "CFax",
  featuredCarousel: "FCar",
  inlineSpotlight: "Spt",
  limit: "Lm",
  map: "Mp",
  monsterAds: "MAd",
  priceReduced: "Price",
  refresh: "Frsh",
  standardFeatured: "Fet",
  wrap: "Wrp",
  allowNew: "Nw",
  allowVideo: "Vd",
  chat: "Cht",
  inventoryComparison: "ICT",
  sideCar: "SdC", // TODO make sure this matches actual key when feature is implemented
  text: "Txt" // TODO make sure this matches actual key when feature is implemented
};

/**
 * List of types for each dealer option
 *
 * @type {Object}
 */
var dealerOptionTypes = {
  VDPcarousel: "boolean",
  allowUsed: "boolean",
  calculator: "boolean",
  carFaxIntegration: "boolean",
  featuredCarousel: "boolean",
  inlineSpotlight: "string",
  limit: "integer",
  map: "boolean",
  monsterAds: "boolean",
  priceReduced: "boolean",
  refresh: "string",
  standardFeatured: "string",
  wrap: "boolean",
  allowNew: "NULL",
  allowVideo: "NULL",
  chat: "boolean",
  inventoryComparison: "boolean",
  sideCar: "NULL",
  text: "NULL"
};

/**
 * Methods to assist in the translation of data before attaching to the dataLayer object
 */
var dataLayerHelper = {
  queue: [], // for pending events
  firedEvents: {},

  // map of additional allowed characters to be allowed for a specific key in data layer
  specialCharExceptions: {
    Entity: "-",
    event: "-",
    regDate: "-",
    "Time Posted": "-:",
    "Previous URL": "[[]?&%/|-=]"
  },
  // see not on dataLayerConfig.retainCasing
  shouldRetainCasing: function (str) {
    for (var i = 0; i < dataLayerConfig.retainCasing.length; i++) {
      if (str.indexOf(dataLayerConfig.retainCasing[i]) > -1) {
        return true;
      }
    }
    return false;
  },
  init: function () {
    this.isTouch =
      !!("ontouchstart" in window) || window.navigator.msMaxTouchPoints > 0;
    this.eventType = !this.isTouch ? "click" : "tap";

    // now that the window has loaded push the initial data created in DataLayer.php
    dataLayerHelper.push(dataLayerInitialized);

    var dlData = this.getMultiple({
      userId: ["userDetails", "userId"],
      sellerId: ["pageDetails", "Seller ID"],
      adId: ["pageDetails", "Ad ID"]
    });
    dataLayerHelper.event = "trigger-ga-event";
    dataLayerHelper.userId =
      dlData.userId === "Not Specified".toLowerCase() ? "" : dlData.userId;
    dataLayerHelper.sellerId = dlData.sellerId;
    dataLayerHelper.adId = dlData.adId;
    dataLayerHelper.eventLabel =
      dataLayerHelper.userId +
      "|" +
      dataLayerHelper.sellerId +
      "|" +
      dataLayerHelper.adId;
    dataLayerHelper.eventActionSuffix = "cars";

    // init new ddm values
    dataLayerHelper.ddmPageviewId = window.ddmPageviewId;
    dataLayerHelper.ddmDeviceId = window.ddmDeviceId;
    dataLayerHelper.ddmSessionId = window.ddmSessionId;

    if (pages[eventPage].impressions) {
      //an unfortunate solution, but carousel doesn't always load very quickly, and among the synchronous events that loop and wait - they actually block the carousel so we just needed an asynchronous event
      if (
        pages[eventPage].impressions.length === 1 &&
        typeof dataLayerConfig.events[pages[eventPage].impressions[0]]
          .selector === "string" &&
        dataLayerConfig.events[
          pages[eventPage].impressions[0]
        ].selector.indexOf("jcarousel") > -1
      ) {
        var impressionsOrigLength = $(
          dataLayerConfig.events[pages[eventPage].impressions[0]].selector
        ).length;
        var impressionIntervalAttempts = 0;
        var impressionInterval = setInterval(function () {
          var impressionsLength = $(
            dataLayerConfig.events[pages[eventPage].impressions[0]].selector
          ).length;
          impressionIntervalAttempts++;
          //they are loaded, yay! --- or 2.5 seconds has passed :(
          if (
            impressionsLength > impressionsOrigLength ||
            impressionIntervalAttempts > 50
          ) {
            clearInterval(impressionInterval);
            dataLayerHelper.setImpressions(eventPage);
          }
        }, 50);
      } else {
        dataLayerHelper.setImpressions(eventPage);
      }
    }

    dataLayerHelper.maybeWait("ga", function () {
      dataLayerHelper.gaLoaded();
    });
  },

  enqueue: function (eventData) {
    this.queue.push(eventData);
  },

  setClientId: function () {
    // ga already defined here
    var clientId = ga.getAll()[0].get("clientId");

    dataLayer.some(function (item) {
      if (item["sessionDetails"]) {
        item["sessionDetails"]["clientId"] = clientId;
        return true;
      }
    });
  },

  setDfpPageViewId: function () {
    if (typeof googletag !== "undefined") {
      // ddmHitID = dataLayerHelper.ddmPageviewId
      googletag
        .pubads()
        .setTargeting(
          "pageviewid",
          dataLayerHelper.get("pageDetails", "ddmHitID")
        );
    }
  },

  setImpressions: function (eventPage, event) {
    //console.log('setImpressions');
    // event variable is only used for spotlights - refactor if that changes
    var impressionObj = {
      event: event || "impressions-loaded",
      ecommerce: {
        currencyCode: "US"
      }
    },
      callableProps; // to store callable properties of impression template

    pages[eventPage].impressions.forEach(function (eventName) {
      //console.log(eventName);
      var $objArray, impressionTemplate;
      (callableProps = {}), (impressions = []);

      // iterate over impression object properties and extract callables
      for (var prop in dataLayerConfig.events[eventName].template) {
        // only custom properties
        if (dataLayerConfig.events[eventName].template.hasOwnProperty(prop)) {
          //console.log(prop);
          if (
            typeof dataLayerConfig.events[eventName].template[prop] ===
            "function"
          ) {
            callableProps[prop] =
              dataLayerConfig.events[eventName].template[prop];
          }
        }
      }
      //console.log(callableProps);
      // get all items by selector or as a function result
      if (typeof dataLayerConfig.events[eventName].selector === "function") {
        $objArray = dataLayerConfig.events[eventName].selector();
      } else {
        $objArray = $(dataLayerConfig.events[eventName].selector);
      }

      if ($objArray.length) {
        //console.log($objArray);
        // all callables are stored, convert to plain object
        impressionTemplate = JSON.parse(
          JSON.stringify(dataLayerConfig.events[eventName].template)
        );
        // iterate over returned jQuery object
        $.each($objArray, function (i, obj) {
          var $obj = $(obj),
            listing = JSON.parse($obj.attr("data-listing"));
          listing.index = i + 1;
          $obj.attr("data-listing", JSON.stringify(listing));

          // go and call them all and update our impression template
          for (var callback in callableProps) {
            if (callableProps.hasOwnProperty(callback)) {
              impressionTemplate[callback] = callableProps[callback](
                listing,
                dataLayerHelper
              );
            }
          }
          // add one more item to impressions
          impressions.push(JSON.parse(JSON.stringify(impressionTemplate)));
        });
        // complete impressions data
        // spotlights is the only thing that uses the event variable. We should refactor this if that changes
        impressionObj.ecommerce.impressions = event
          ? dataLayerHelper.removeDuplicateImpressions(impressions)
          : dataLayerHelper.createEmptySpotlightSlots(impressions);
        if (impressionObj.event === "impressions-loaded") {
          //don't send spotlights here - we could probably filter them out earlier, but for now this was simplest.
          impressionObj.ecommerce.impressions = impressionObj.ecommerce.impressions.filter(
            imp => imp.list !== "spotlight"
          );
        }
        dataLayerHelper.pushImpression(impressionObj);
      }
    });
  },

  getPageName: function () {
    switch (eventPage) {
      case "listing.index":
        return "detail";
      case "listing.email-seller":
        return "email";
      case "photo.index":
        return "gallery";
      case "listing.videos":
        return "video viewer";
      case "sell.index":
        return "sell";
      case "sell.submit":
        return "submit";
      case "index.index":
        return "homepage";
      case "search.index":
        return "srp";
      case "dealer-search.index":
        return "dealer-search";
      default:
        return "?";
    }
  },

  /**
   * @param {Object} obj - Object with functions
   * @param {Object] $targetObj - Object that was clicked on
   */
  iterateObject: function (obj, resultObj, $targetObj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop)) {
        resultObj[prop] = dataLayerHelper.iterateObject(
          obj[prop],
          resultObj,
          $targetObj
        );
      } else if (typeof prop === "function") {
        resultObj[prop] = obj[prop]($targetObj, dataLayerHelper);
      }
    }
    return resultObj;
  },

  /**
   * This will eventually move to universal handler
   */
  eventGAHandler: function (eventName, $targetObj, customEventData) {
    // specify which object in the dataLayerConfig.events we are currently referencing
    var eventLabel = dataLayerConfig.events[eventName].eventLabel,
      eventCategory = dataLayerConfig.events[eventName].eventCategory,
      eventAction = dataLayerConfig.events[eventName].eventAction,
      eventActionSuffix = dataLayerConfig.events[eventName].eventActionSuffix,
      eventObj = JSON.parse(JSON.stringify(dataLayerConfig.events[eventName]));

    // get template name for event (eventGA, productClick)
    //    eventTemplate = dataLayerConfig.templates['eventGA'];

    //    eventObj = this.iterateObject(dataLayerConfig.events[eventName], {});
    //console.log(eventObj);
    //    eventRecord = $.extend(true, eventTemplate, eventObj);

    // if eventLabel is a function, run it and use the returned value
    if (typeof eventLabel === "function") {
      eventObj.eventLabel = eventLabel(
        $targetObj,
        dataLayerHelper,
        customEventData
      );
    }
    if (typeof eventCategory === "function") {
      eventObj.eventCategory = eventCategory(
        $targetObj,
        dataLayerHelper,
        customEventData
      );
    }
    if (typeof eventAction === "function") {
      eventObj.eventAction = eventAction(
        $targetObj,
        dataLayerHelper,
        customEventData
      );
    }
    if (typeof eventActionSuffix === "function") {
      eventObj.eventActionSuffix = eventActionSuffix(
        $targetObj,
        dataLayerHelper,
        customEventData
      );
    }

    var eventRecord = {
      event: eventObj.event || this.event,
      eventCategory: eventObj.eventCategory,
      eventAction:
        eventObj.eventActionSuffix !== ""
          ? eventObj.eventAction +
          "|" +
          (eventObj.eventActionSuffix || this.eventActionSuffix)
          : eventObj.eventAction,
      eventLabel: eventObj.eventLabel || this.eventLabel
    };

    return eventRecord;
  },

  /**
   *
   * @param eventName
   * @param $targetObj
   * @returns {{ecommerce: {purchase: {}}}}
   */
  purchaseHandler: function (eventName, $targetObj) {
    var eventObj = dataLayerConfig.events[eventName];
    var newEvent = { event: "conversion", ecommerce: { purchase: {} } };
    var coupon = $targetObj.attr("data-coupon") || "";

    // not making any assumptions here
    try {
      newEvent.ecommerce.purchase.actionField = eventObj.ecommerce.purchase.actionField(
        coupon
      );
      newEvent.ecommerce.purchase.products = eventObj.ecommerce.purchase.products();
    } catch (e) {
      console.debug(
        "Ecommerce purchase object properties were not properly assigned.",
        e
      );
    }

    return newEvent;
  },

  /**
   * This will eventually move to universal handler
   */
  productClickHandler: function (eventName, $targetObj) {
    // edited for reuse to dynamically get the ecommerce object key. Currently they are 'click' and 'detail'
    var ecommKey = Object.keys(dataLayerConfig.events[eventName].ecommerce)[0];

    var eventList = dataLayerConfig.events[eventName].ecommerce[ecommKey][
      "actionField"
    ]
      ? dataLayerConfig.events[eventName].ecommerce[ecommKey]["actionField"][
      "list"
      ]
      : null,
      product =
        dataLayerConfig.events[eventName].ecommerce[ecommKey].products[0],
      attrName = product.name,
      attrId = product.id,
      attrPrice = product.price,
      attrBrand = product.brand,
      attrCategory = product.category,
      // this was in story, but we might want to have category instead
      attrContentType = product["content type"],
      attrVariant = product.variant,
      attrPosition = product.position,
      templateName = dataLayerConfig.events[eventName].template,
      eventObj = JSON.parse(
        JSON.stringify(dataLayerConfig.templates[templateName])
      ),
      // get real data
      ecommObj = JSON.parse($targetObj.attr("data-listing")),
      productObj = JSON.parse(JSON.stringify(product));
    if (typeof eventList === "function") {
      eventObj.ecommerce[ecommKey].actionField.list = eventList(
        ecommObj,
        dataLayerHelper
      );
      /*
            eventObj.ecommerce.click.actionField.list = eventList(
        ecommObj,
        dataLayerHelper
      );
*/
    } else if (eventList === null) {
      // unset the whole actionField
      delete eventObj.ecommerce[ecommKey].actionField;
    }
    if (typeof attrName === "function") {
      productObj.name = attrName(ecommObj, dataLayerHelper);
    }
    if (typeof attrId === "function") {
      productObj.id = attrId(ecommObj, dataLayerHelper);
    }
    if (typeof attrPrice === "function") {
      productObj.price = attrPrice(ecommObj, dataLayerHelper);
    }
    if (typeof attrBrand === "function") {
      productObj.brand = attrBrand(ecommObj, dataLayerHelper);
    }
    if (typeof attrCategory === "function") {
      productObj.category = attrCategory(ecommObj, dataLayerHelper);
    }
    if (typeof attrVariant === "function") {
      productObj.variant = attrVariant(ecommObj, dataLayerHelper);
    }
    if (typeof attrPosition === "function") {
      productObj.position = attrPosition(ecommObj, dataLayerHelper);
    }

    // this was in story, but we might want to have category instead
    if (typeof attrContentType === "function") {
      productObj["content type"] = attrContentType(ecommObj, dataLayerHelper);
    }

    eventObj.ecommerce[ecommKey].products[0] = productObj;

    return eventObj;
  },

  productDetailHandler: function (eventName, $targetObj) {
    return this.productClickHandler(eventName, $targetObj);
  },

  setupEvents: function (eventName) {
    //  console.log('setupEvents');
    //  console.log('eventName: '+eventName);
    var eventObj,
      handler,
      templateName,
      selector,
      handleEvent = this.handleEvent;
    /* steps:
    - grab the template for every particular event (stored inside)
    - run template handler which pulls event description, convert it to plain object
      and updates all properties callable or not
    - push this event object into dataLayer, pushEvent also needs update to be more flexible
    */
    // get template name for event (eventGA, productClick)
    templateName = dataLayerConfig.events[eventName].template || "eventGA";
    handler = templateName + "Handler";
    // get template structure
    //    template = dataLayerConfig.templates[templateName];
    //console.log('template '+selector);
    eventType =
      dataLayerConfig.events[eventName]["eventType"] ||
      dataLayerHelper.eventType;
    selector = dataLayerConfig.events[eventName].selector;

    if (dataLayerConfig.events[eventName].onload) {
      // delete the onload property so that it doesn't get pushed into the dataLayer
      delete dataLayerConfig.events[eventName].onload;
      handleEvent(eventName, templateName, handler, selector);
    } else {
      if (selector !== null) {
        $(document).on(eventType, selector, function (e) {
          var defaultConditional = function () { return true; };
          var conditional =
            dataLayerConfig.events[eventName].conditional ||
            defaultConditional;
          var conditionalRecord =
            dataLayerConfig.events[eventName].conditionalRecord ||
            defaultConditional;
          if(typeof dataLayerConfig.events[eventName].getEvent === 'function') {
            if(conditional() && conditionalRecord()) {
              var event = dataLayerConfig.events[eventName].getEvent(dataLayerHelper);
              event && dataLayerHelper.push(event);
            }
          } else {
            // if there is a condition then use it otherwise always true
            if (conditional() && conditionalRecord()) {
              handleEvent(eventName, templateName, handler, this);
            }
          }
        });
      }
    }
  },
  /**
   * For custom event $el is event data
   */
  getEventLabel: function ($el, eventLabelProp) {
    var eventLabel;
    if (typeof eventLabelProp === "function") {
      eventLabel = String(eventLabelProp($el, this));
    } else {
      eventLabel = String(eventLabelProp);
    }

    return eventLabel;
  },

  getEventAction: function ($el, eventActionProp) {
    var eventAction;
    if (typeof eventActionProp === "function") {
      eventAction = String(eventActionProp($el, this));
    } else {
      eventAction = String(eventActionProp);
    }
    return eventAction;
  },

  /**
   * Simulates a data layer event given an event name and an HTMLElement
   * @param eventName - The key of the event from the dataLayerConfig.events array
   * @param el - The HTMLElement from which to simulate the event
   * @param customEventData - Any extra data arriving with event
   */
  simulateEvent: function (eventName, el, customEventData) {
    var handler, templateName, selector;

    templateName = dataLayerConfig.events[eventName].template || "eventGA";
    handler = templateName + "Handler";
    eventType =
      dataLayerConfig.events[eventName]["eventType"] ||
      dataLayerHelper.eventType;

    this.handleEvent(eventName, templateName, handler, el, customEventData);
  },

  /**
   * Pushes an event to the dataLayer when it is triggered whether on page load, or after an action
   * @param eventName
   * @param templateName
   * @param handler
   * @param context
   * @param customEventData
   */
  handleEvent: function (
    eventName,
    templateName,
    handler,
    context,
    customEventData
  ) {
    // console.log('selector event fired!!!');
    // console.log('handler ' + handler);
    var eventObj = dataLayerHelper[handler](
      eventName,
      $(context),
      customEventData
    );
    //    console.log('eventObj', eventObj);
    dataLayerHelper.pushEvent(
      eventObj,
      dataLayerConfig.events[eventName],
      function () {
        dataLayerHelper.firedEvents[eventName] = true;
      },
      eventName
    );
  },

  /**
   * Waits to fire each event if there is a load dependency designated in dataLayerConfig.loadDependencies
   * @param eventName - The name of the event in dataLayerConfig.events
   * @param callback - A function to call once dependencies are loaded
   * @param waitDuration - The amount of time, in milliseconds, to wait for the dependency
   * @param loadDependency - An optional param that overrides the event name for what the load dependency is
   */
  maybeWait: function (eventName, callback, waitDuration, loadDependency) {
    // how long to wait before timing out
    var wait = waitDuration || 5000;
    // the name of the dependency to wait for
    var depName = loadDependency || eventName;
    // an incremented wait time to check against when setInterval is called
    var waitTime = 0;
    // an array of dependencies to wait for for this specific page
    var waitFor =
      pages[eventPage].loadDeps && pages[eventPage].loadDeps.length
        ? pages[eventPage].loadDeps
        : [];
    // the dependency object -- see dataLayerConfig.loadDependencies
    var dep = dataLayerConfig.loadDependencies[depName] || {
      loaded: function () {
        return true;
      }
    };
    // whatever set interval returns...
    var interval;

    // check if the event has a dependency
    if (waitFor.indexOf(depName) > -1) {
      // call the before function if there is one
      dep.before && dep.before(eventName);
      // set the time interval to check for the dependency
      interval = setInterval(function () {
        // check if the dependency is loaded
        if (dep.loaded(eventName)) {
          // now that the dependency is loaded call the dependency callback
          dep.callback && dep.callback(eventName);
          // now call the callback passed to the function
          callback(eventName);
          // clear the interval so it stops looping
          clearInterval(interval);
          // console.log(eventName + ' event has loaded');
        }

        // if the wait time is longer than wait it is timed out and needs to stop the looping
        if (waitTime > wait) {
          clearInterval(interval);
        }
        waitTime += 100;
      }, 100);
    } else {
      // no load dependency
      callback(eventName);
    }
  },

  gaLoaded: function () {
    // console.log('ga loaded');
    this.setClientId();
    this.setDfpPageViewId();
    // assign some commonly used data
    this.event = "trigger-ga-event";
    this.eventLabel = this.userId + "|" + this.sellerId + "|" + this.adId;
    this.eventActionSuffix = "cars";

    // If we have events listed for this page, then create events
    if (pages[eventPage]) {
      // bind clicks
      Object.keys(dataLayerConfig.events).forEach(function (eventName) {
        if (!dataLayerConfig.events.hasOwnProperty(eventName)) {
          return;
        }

        if (
          pages[eventPage].events &&
          pages[eventPage].events.indexOf(eventName) > -1
        ) {
          // as soon as new setupEvents() is done, we may switch to using it
          dataLayerHelper.maybeWait(eventName, function (eventName) {
            dataLayerHelper.setupEvents(eventName);
          });
        } else if (
          pages[eventPage].dfpEvents &&
          pages[eventPage].dfpEvents.indexOf(eventName) > -1
        ) {
          dataLayerHelper.maybeWait(eventName, function () { }, 10000, "dfp");
        }
      });

      // intercept all ajax successes to check against url
      $(document).ajaxSuccess(function (event, xhr, settings) {
        // get base url from intercepted ajax success
        var url = settings.url.split("?")[0],
          ajaxEventObj = null;
        // Use the url to find the event in the dataLayerConfig.events
        if (pages[eventPage]["ajaxEvents"]) {
          ajaxEventObj = dataLayerHelper.findEventByUrl(
            pages[eventPage].ajaxEvents,
            url
          );
        }
        // if we receive back an event object, use it to push a new event.
        // if there is a getEvent function it overrides everything and uses that to create the event
        if (ajaxEventObj && typeof ajaxEventObj.getEvent !== "function") {
          dataLayerHelper.pushEvent(ajaxEventObj);
        } else if (
          ajaxEventObj &&
          typeof ajaxEventObj.getEvent === "function"
        ) {
          var event = ajaxEventObj.getEvent(dataLayerHelper, xhr, settings);
          // if event is truthy push it
          event && dataLayerHelper.push(event);
        }
      });

      $(document).on("customOnLoad.GA", function (e) {
        var eventLabel,
          eventObj,
          eventName = e.message;

        if (pages[eventPage].events.indexOf(eventName) > -1) {
          eventObj = JSON.parse(
            JSON.stringify(dataLayerConfig.events[eventName])
          );
          //console.log('GA on load handler');
          // If this item is clicked, push the event onto the dataLayer
          dataLayerHelper.handleEvent(
            eventName,
            "eventGA",
            "eventGAHandler",
            e
          );
        }
      });

      // no selector defined, custom event, attach to document
      // currently there is only one event type - customGAClick
      $(document).on("customGAClick", function (e) {
        //console.log('customGAClick', e.originalEvent);
        // pull out event name
        var eventName = e.originalEvent.data.event;
        var event = JSON.parse(
          JSON.stringify(dataLayerConfig.events[eventName])
        );
        // set event type to default
        event.event = this.event;
        event.eventLabel = dataLayerHelper.getEventLabel(
          e.originalEvent.data,
          dataLayerConfig.events[eventName].eventLabel
        );
        event.eventAction = dataLayerHelper.getEventAction(
          e.originalEvent.data,
          dataLayerConfig.events[eventName].eventAction
        );
        dataLayerHelper.pushEvent(event);
      });
      //console.log(pages[eventPage]);
    }
    // fire all pending events
    this.triggerQueue();
  },

  /**
   * Before you say anything,
   * I really hate that I have to use global variables to do this, but such is life.
   * This creates empty array indexes where spotlights will go
   * @param {Array<Object>} impressions
   */
  createEmptySpotlightSlots: function (impressions) {
    if (!pages[eventPage].spotlights) {
      return impressions;
    }
    // locally scope global vars
    var spotlightsPerRow = window.spotlightsPerRow,
      listingsBetweenSpotlights = window.listingsBetweenSpotlights,
      spotlightAvailable = window.spotlightAvailable,
      perPage = window.perPage;

    // maths
    var rowsNeeded = perPage / listingsBetweenSpotlights,
      spotlightsNeeded = rowsNeeded * spotlightsPerRow,
      toFill =
        spotlightAvailable > spotlightsNeeded
          ? spotlightsNeeded
          : spotlightAvailable,
      featuredOffset = impressions.filter(function (impression) {
        return impression.list === "featured";
      }).length,
      fillIndex = listingsBetweenSpotlights + featuredOffset;

    while (toFill > 0) {
      var args = new Array(spotlightsPerRow);
      args.unshift(0);
      args.unshift(fillIndex);
      impressions.splice.apply(impressions, args);

      fillIndex += listingsBetweenSpotlights + spotlightsPerRow;
      toFill -= spotlightsPerRow;
    }
    // fix the positions
    return impressions
      .map(function (impression, i) {
        if (impression && impression.hasOwnProperty("position")) {
          impression.position = i + 1;
        }
        return impression;
      })
      .filter(function (impression) {
        return !!impression;
      });
  },

  /**
   * Removes impressions already sent in impressions-loaded event
   * @param {Array<Object>} impressions
   */
  removeDuplicateImpressions: function (impressions) {
    if (!pages[eventPage].spotlights) {
      return impressions;
    }
    return impressions.filter(function (impression) {
      return impression.list === "spotlight";
    });
  },

  getDropdownValueOptions: function ($el) {
    var options = $el.children().map(function (i, option) {
      return option.innerText;
    });
    var selected = $el.val();

    return { options: options, value: selected };
  },

  getFormData: function ($el) {
    return $el.serializeArray();
  },

  pushEvent: function (eventData, eventTemplate, callback, eventName) {
    var eventRecord = {
      event: eventData.event || this.event,
      eventCategory: eventData.eventCategory,
      eventAction:
        eventData.eventActionSuffix !== ""
          ? eventData.eventAction +
          "|" +
          (eventData.eventActionSuffix || this.eventActionSuffix)
          : eventData.eventAction,
      eventLabel: eventData.eventLabel || this.eventLabel
    };

    // adding template conditional for recording events it defaults true
    // if the conditional function exists then it uses that value to determine if it should be recorded
    var conditional = true,
      conditionalRecord = false;

    if (eventTemplate && eventTemplate.conditional) {
      conditional = eventTemplate.conditional();
    }
    if (eventTemplate && eventTemplate.conditionalRecord) {
      conditionalRecord = eventTemplate.conditionalRecord();
    }

    if (typeof eventTemplate === "undefined") {
      // If login is not required, or they are logged in, run it.
      // loggedIn is globally available from /application/views/scripts/template/data-layer.phtml
      if (conditional) {
        if (conditionalRecord) {
          this.outputToConsole(eventName, eventRecord);
        }
        dataLayerHelper.push(eventRecord);
        if (callback) {
          callback();
        }
      }
    } else {
      if (conditional) {
        if (conditionalRecord) {
          this.outputToConsole(eventName, eventData);
        }
        dataLayerHelper.push(eventData);
        if (callback) {
          callback();
        }
      }
    }
  },

  outputToConsole: function (eventName, eventRecord) {
    var events = ["noThanksPostMyAdClick", "impressionClick"];

    if (eventName && eventRecord && events.indexOf(eventName) >= 0) {
      sessionStorage.setItem("event_" + eventName, JSON.stringify(eventRecord));
    }
  },

  pushImpression: function (impressionObj) {
    dataLayerHelper.push(impressionObj);
  },

  /**
   * This method wraps dataLayer.push so that any additional things that need to be applied to our events before pushing it
   *  get appled to the event
   *
   *  Note: The only place that does not use this function is in GTMdataLayer.js
   *
   * @param {Object} event the event being pushed to the dataLayer
   */

  push: function (event) {
    // here we can run any extra stuff that we need to run before we actually push something to dataLayer
    // story #148519157 lowercase all values
    if (dataLayerHelper.roughSizeOfObject(event) > 7000) {
      //GA only accepts 8000 bytes, include small buffer
      if (event.ecommerce && event.ecommerce.impressions) {
        dataLayerHelper.reduceEcommerceSizeAndPush(event);
      } else {
        console.error(
          "DL payload too big, but no logic to break it down exists",
          event
        );
      }
    } else {
      var toPush = dataLayerHelper.eventRecurse(event);
      dataLayer.push(toPush);
    }
  },

  reduceEcommerceSizeAndPush: function (event) {
    var half = event.ecommerce.impressions.length / 2;
    var rightHalf = half;
    //If we didn't get a whole number, make half bigger by one and right half smaller by one
    if (half > Math.floor(half)) {
      half = Math.ceil(half);
      rightHalf = Math.floor(half);
    }
    var halfEvent = Object.assign({}, event);
    halfEvent.ecommerce = Object.assign({}, event.ecommerce);
    halfEvent.ecommerce.impressions = event.ecommerce.impressions.slice(
      0,
      half
    );

    var rightHalfEvent = Object.assign({}, event);
    rightHalfEvent.ecommerce = Object.assign({}, event.ecommerce);
    rightHalfEvent.ecommerce.impressions = event.ecommerce.impressions.slice(
      half
    );

    dataLayerHelper.push(halfEvent);
    dataLayerHelper.push(rightHalfEvent);
  },

  roughSizeOfObject(object) {
    var objectList = [];
    var stack = [object];
    var bytes = 0;

    while (stack.length) {
      var value = stack.pop();

      if (typeof value === "boolean") {
        bytes += 4;
      } else if (typeof value === "string") {
        bytes += value.length * 2;
      } else if (typeof value === "number") {
        bytes += 8;
      } else if (
        typeof value === "object" &&
        objectList.indexOf(value) === -1
      ) {
        objectList.push(value);
        for (var i in value) {
          stack.push(value[i]);
        }
      }
    }
    return bytes;
  },

  /**
   * handles removing special characters from all strings pushed into dataLayer for story #149133009
   * @param {string} key the property name of the string
   * @param {string} str the string to remove special chars from
   *
   * @return {string}
   */
  handleSpecialChars: function (key, str) {
    // default to empty string
    var extraChars = "";
    // if there are additional custom characters for the key to keep add them
    if (key && dataLayerHelper.specialCharExceptions.hasOwnProperty(key)) {
      extraChars = dataLayerHelper.specialCharExceptions[key];
    }
    // replace all non-alphanumeric characters except ., |, spaces, and and specific extra characters pulled from dataLayerHelper.specialCharExceptions
    var re = new RegExp("[^a-zA-Z0-9|. " + extraChars + "]", "g");

    // replace "&" with "and" if NOT in special chars.
    if (extraChars.indexOf("&") == -1) {
      str = str.replace("&", "and");
    }
    return str.replace(re, "");
  },

  /**
   * Recursively lowercases all values in a string, array, or object
   *  if value is anything other than string, array, or object it is just returned the same
   *
   * @param {any} data really any type of variable
   *
   * @return {any} whatever it is it will definitely have tried to be lowercase
   */
  eventRecurse: function (data, key) {
    // if data is falsey we put not specified
    if (!data) return "not specified";

    var lower;

    switch (data.constructor) {
      case String: // it's a string just lowercase it
        if (dataLayerHelper.shouldRetainCasing(data)) {
          lower = data;
        } else if (this.isUrl(data)) {
          lower = data.toLowerCase();
        } else {
          lower = dataLayerHelper.handleSpecialChars(key, data.toLowerCase());
        }
        break;
      case Object: // object loop through props
        lower = dataLayerHelper.lowerCaseObject(data);
        break;
      case Array: // array loop through array items
        lower = dataLayerHelper.lowerCaseArray(data);
        break;
      default:
        // whatever this is I ain't gon' mess wit' it
        lower = data;
        break;
    }

    return lower;
  },

  /**
   * Loops through an array and lowercases it's values recursively
   *
   * @param {Array} arr an array of data
   *
   * @return {Array} same array with lowercase values
   */
  lowerCaseArray: function (arr) {
    // copy the array so as to not harm the original data
    var lower = JSON.parse(JSON.stringify(arr));
    for (var i = 0; i < arr.length; i++) {
      lower[i] = dataLayerHelper.eventRecurse(arr[i]);
    }
    return lower;
  },

  /**
   * Loops through an the properties of an object and lowercases it's values recursively
   *
   * @param {Object} obj an object of data
   *
   * @return {Object} same object with lowercase values
   */
  lowerCaseObject: function (obj) {
    // copy the object so as to not harm the original data
    var lower = JSON.parse(JSON.stringify(obj));
    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        if (key === 'event') {
          lower[key] = obj[key]; //Event name should remain unchanged
        } else {
          lower[key] = dataLayerHelper.eventRecurse(obj[key], key);
        }
      }
    }
    return lower;
  },

  /**
   * Gets event data from dataLayer by the name of the event
   */
  getEventFromDataLayer: function (eventName) {
    for (var i = 0; i < dataLayer.length; i++) {
      if (dataLayer[i].event === eventName) {
        // hate this, but can't pass by reference here
        return JSON.parse(JSON.stringify(dataLayer[i]));
      }
    }
    return null;
  },

  get: function (section, key) {
    var res = null;

    dataLayer.some(function (item) {
      if (item[section] && item[section][key]) {
        res = item[section][key];
        return true;
      }
    });
    return res;
  },

  /* like this
   var dlData = dataLayerHelper.getMultiple({
   sellerId: ['pageDetails', 'Seller ID'],
   adId: ['pageDetails', 'Ad ID'],
   userId: ['userDetails', 'userId']
   });*/
  getMultiple: function (keyObject) {
    var res = {},
      section,
      param,
      value;

    Object.keys(keyObject).forEach(function (key, index) {
      section = keyObject[key][0];
      param = keyObject[key][1];
      value = dataLayerHelper.get(section, param);
      // this is default blank value
      if (value === "Not Specified") {
        value = "";
      }
      res[key] = value;
    });
    return res;
  },

  /**
   * Validates if string is URL in order to prevent removing special characters
   *
   * @param stringValue
   * @returns stringValue
   */
  isUrl: function (stringValue) {
    var value = document.createElement("a");
    value.href = stringValue;
    return value.hostname;
  },

  /**
   * Finds an event object given the events for the page and the ajax url
   *
   * @param events  (var pages)
   * @param url
   * @returns {*}   function from dataLayerConfig.events
   */
  findEventByUrl: function (events, url) {
    var foundEvent = null;

    events.forEach(function (event) {
      // console.log(event, url, dataLayerConfig.events[event], url.indexOf(dataLayerConfig.events[event].url) > -1);
      if (url.indexOf(dataLayerConfig.events[event].url) > -1) {
        foundEvent = dataLayerConfig.events[event];
      }
    });
    return foundEvent;
  },

  triggerQueue: function () {
    if (this.queue) {
      this.queue.forEach(function (eventData) {
        //console.log('trigger event');
        //console.log(eventData);
        $.event.trigger(eventData);
      });
      this.queue = [];
    }
  },

  addListingData: function (listings) {
    // add item to extraData.listingData
    listings.forEach(function (item) {
      extraData.listingData[item[id]] = item;
    });
  },

  /**
   * Make name parameter for impression
   */
  getListingName: function (listing) {
    var name = "",
      empty = "Not Specified";

    name += (listing.make ? listing.make : empty) + "|";
    name += (listing.model ? listing.model : empty) + "|";
    name += (listing.trim ? listing.trim : empty) + "|";
    name += (listing.makeYear ? listing.makeYear : empty) + "|";
    // mileage is required, if it's falsy then it's zero
    name += (listing.mileage ? listing.mileage : "0") + "|";
    name += (listing.vin ? listing.vin : empty) + "|";
    name += dataLayerHelper.ddmPageviewId;

    return name;
  },

  getListingContentType: function (dealerUpgrades) {
    var dealerOptions,
      contentType = "",
      val;

    if (!dealerUpgrades) {
      return "FSBO";
    }
    dealerOptions = dealerUpgrades.options;

    if (!dealerOptions) {
      // it's dealer but has no options
      return "dealer";
    }

    for (var option in dealerOptionsMap) {
      switch (dealerOptionTypes[option]) {
        case "boolean":
        case "NULL":
          val = ".";
          if (option == "allowVideo") {
            val += dealerUpgrades["video"] ? "D" : "";
            val += dealerOptions[option] ? "C" : "";
            // if there are no dealer video options
            if (val == ".") {
              val += "F";
            }
            // TODO handle text and side car when they are implemented
          } else if (option == "text" || option == "sideCar") {
            //              val = dealerOptions[option];
            val = "";
          } else if (option == "limit") {
            val = dealerOptions[option] ? dealerOptions[option] : 5;
          } else {
            val += dealerOptions[option] ? "T" : "F";
          }
          contentType += dealerOptionsMap[option] + val + "|";
          break;
        case "integer":
        case "string":
          // we have ternary operation here due to Javascvript returns undefined unlike PHP
          contentType +=
            dealerOptionsMap[option] +
            "." +
            (dealerOptions[option] || "") +
            "|";
          break;
        default:
          break;
      }
    }
    return contentType.slice(0, -1);
  },
  // searches for the first token occurrence in searchString and
  // returns value from referenceObject indexed by found string
  // TODO: figure out a better name for function
  mapToken: function (tokenArray, searchString, referenceObject) {
    var result = null;

    tokenArray.some(function (token) {
      if (searchString.indexOf(token) !== -1) {
        result = referenceObject[token];
        return true;
      }
      return false;
    });
    return result;
  }
};

// check for property existence and optional value
function isset(obj, key, value) {
  var propExists = key.split(".").every(function (prop) {
    if (typeof obj != "object" || obj === null || !prop in obj) {
      return false;
    }

    obj = obj[prop];
    return true;
  });
  // in most cases it means we have no value passed
  if (propExists && typeof value !== "undefined") {
    return obj === value;
  } else {
    return propExists;
  }
}

function translateDetailsKeys(gaPostDetails) {
  var details = {
    "Ad ID": null,
    "Asking Price": "not specified",
    Body: "not specified",
    City: "not specified",
    "Color Exterior": "not specified",
    "Color Interior": "not specified",
    "Condition Exterior": "not specified",
    "Condition Interior": "not specified",
    "Content Grouping 1": "not specified",
    "Content Grouping 2": "not specified",
    "Content Grouping 3": "not specified",
    "Content Type": "not specified",
    Cylinders: "not specified",
    Doors: "not specified",
    Drive: "not specified",
    Fuel: "not specified",
    "Has Carfax": "not specified",
    "Has Photos": "not specified",
    "Listing Type":
      gaPostDetails.sellerType === "For Sale By Owner" ? "FSBO" : "Dealer",
    Liters: "not specified",
    "Login State": "true",
    Make: "not specified",
    Mileage: "not specified",
    Model: "not specified",
    "Navigation Method": "not specified",
    "Photo Count": "not specified",
    "Posting Method": "not specified",
    "Previous URL": "not specified",
    "Seller Accepts Texts": "not specified",
    "Seller ID": "not specified",
    "Seller Type": "not specified",
    "Site Section": "cars",
    "Site Section 2": "not specified",
    "Site Section 3": "not specified",
    "Site Section 4": "not specified",
    "Site Section 5": "not specified",
    "Site Version Number": "1.0.0",
    State: "not specified",
    Template: "sell page",
    "Time Posted": "not specified",
    Title: "not specified",
    Transmission: "not specified",
    Trim: "not specified",
    VIN: "not specified",
    "Video Count": "not Specified",
    Year: "not specified",
    Zip: "not specified"
  };
  var photosLength =
    gaPostDetails.photo && Array.isArray(gaPostDetails.photo)
      ? gaPostDetails.photo.length
      : 0;
  var calculated = {
    "Photo Count": photosLength || "not specified",
    "Has Photos": photosLength ? "true" : "not specified"
  };
  var keyMap = {
    id: "Ad ID",
    price: "Asking Price",
    body: "Body",
    city: "City",
    exteriorColor: "Color Exterior",
    interiorColor: "Color Interior",
    exteriorCondition: "Condition Exterior",
    interiorCondition: "Condition Interior",
    cylinders: "Cylinders",
    numberDoors: "Doors",
    drive: "Drive",
    fuel: "Fuel",
    carfax_upgrade: "Has Carfax",
    newUsed: "Listing Type",
    liters: "Liters",
    make: "Make",
    mileage: "Mileage",
    model: "Model",
    hasAcceptText: "Seller Accepts Texts",
    memberId: "Seller ID",
    sellerType: "Seller Type",
    state: "State",
    createTime: "Time Posted",
    titleType: "Title",
    transmission: "Transmission",
    trim: "Trim",
    vin: "VIN",
    makeYear: "Year",
    zip: "Zip"
  };
  Object.keys(gaPostDetails).forEach(function (key) {
    if (keyMap[key]) {
      details[keyMap[key]] = gaPostDetails[key];
    }
  });
  details = Object.assign({}, details, calculated);
  return details;
}

$(document).ready(function () {
  // this needs to be before handlers as it assigns eventType
  dataLayerHelper.init();

  // assign handler to remember if listing was featured
  // assuming listing cannot be featured and spotlighted simultaneously
  if (eventPage === "search.index") {
    // featured listing
    $(document).on(
      dataLayerHelper.eventType,
      ".featured-listing-title a,.featured-listing-right a",
      function (e) {
        var data = {
          // figure out listing id since we have only one featured
          id: $(".featured-listing-main").attr("data-id"),
          timestamp: new Date().getTime(), // milliseconds
          featured: true
        },
          key = "srp-listing-flags-" + data.id;

        sessionStorage.setItem(key, JSON.stringify(data));
      }
    );
    // spotlighted listing
    $(document).on(
      dataLayerHelper.eventType,
      ".spotlight.listing .photo-block a,.spotlight.listing h2.title a,.spotlight.listing .srp-listing-description a",
      function (e) {
        var data = {
          // figure out listing id
          id: $(this)
            .closest(".spotlight.listing")
            .attr("data-id"),
          timestamp: new Date().getTime(), // milliseconds
          spotlight: true
        },
          key = "srp-listing-flags-" + data.id;

        sessionStorage.setItem(key, JSON.stringify(data));
      }
    );
  }
});
