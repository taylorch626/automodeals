/* global MYACCOUNT_URL */
/**
 * Save the favorite if it's a featured listing
 * @param {string} link - link where we should forward the user after recording the stat
 * @param {number} id - id of the listing
 * @param {number} mid - memberId
 */
function save_featured_favorite(link, id, mid) {
  save_favorite(link, true);
}

/**
 * Save all the rest of the favorites
 * @param {string} link - link where we should forward the user after recording the stat
 * @param {boolean} skipstat - if we skip the stat, go straight to the link, otherwise, record stat first
 * @param {number} id - id of the listing
 * @param {number} mid - memberId
 */
function save_favorite(link, skipstat, id, mid) {
  $(link).html("Saving...");
  $(link).removeAttr("onclick");
  $(link).click(function(event) {
    event.preventDefault();
  });
  $(link).css("text-decoration", "none");
  $(link).css("cursor", "wait");
  $.post(
    "/favorite/add-favorite-ad",
    {
      id: $(link)
        .attr("id")
        .substr(
          $(link)
            .attr("id")
            .lastIndexOf("_") + 1
        )
    },
    function(data) {
      if (data["status"] == "1") {
        added_to_favorites($(link).attr("id"), true);
      } else {
        added_to_favorites($(link).attr("id"), false);
      }
    },
    "json"
  );
}

/**
 *
 * @param {Object} event
 * @param {number} id - listing id
 * @param {*} changeAll
 */
function changeFavoriteHandler(event, id, changeAll) {
  //console.log('in changeFavoriteHandler');
  var isFavorite =
    event.classList.contains("icon--weighted-heart") ||
    event.classList.contains("heart-filled");
  changeFavorite(id, isFavorite, function() {
    if (event) {
      toggleFavorite(event, isFavorite, id);
    }
  });
}

/**
 * add favorite
 * @param {number} id - listing id
 * @param {function} cb - callback
 */
function addFavorite(id, cb) {
  var url = "/favorite/add-favorite-ad";
  favoriteAd(id, url, cb);
}

/**
 * remove favorite
 * @param {number} id - listing id
 * @param {function} cb - callback
 */
function removeFavorite(id, cb) {
  var url = "/favorite/remove-favorite-ad";
  favoriteAd(id, url, cb);
}

/**
 * favorite the listing on return
 * @param {number} id - listing id
 * @param {string} url - url to which we forward the user
 * @param {function} cb - callback
 */
function favoriteAd(id, url, cb) {
  var callback = function(response) {
    if (response["status"] == "1") {
      if (cb) {
        cb(response);
      }
    } else {
      if (response.message === "Not logged in") {
        var referrer = encodeURIComponent(
          window.location.href.toString().split(window.location.host)[1]
        );
        if (referrer.indexOf("%3F") > -1) {
          referrer += encodeURIComponent("&add-favorite=" + id);
        } else {
          referrer += encodeURIComponent("?add-favorite=" + id);
        }
        window.location.href =
          window.BASE_URL +
          "/public/member/login?login_forward=" +
          encodeURIComponent(window.CARS_URL) +
          referrer;
      } else {
        // another error, just show it
        if (errorModal) {
          errorModal.openErrorModal(
            "Error",
            "This listing was deleted and cannot be favorited."
          );
        }
      }
    }
  };

  $.post(url, { id: id }, callback, "json");
}

/**
 * toggle favorite
 * @param {number} id - listing id
 * @param {boolean} isFavorite - whether the listing is already a favorite
 * @param {function} cb - callback
 */
function changeFavorite(id, isFavorite, cb) {
  if (isFavorite) {
    removeFavorite(id, cb);
  } else {
    //console.log('item in not favorited yet');
    // if user is not logged in
    if (!window.loggedIn) {
      //console.log('user is not logged in');
      // remember seller Id
      localStorage.setItem(
        "cars-favorited-" + id,
        $(".save_favorite[data-id=" + id + "]").attr("data-seller-id")
      );
      //console.log('localStorage filled with');
      //console.log('cars-favorited-' + id + ': ' + $('span.save_favorite[data-id='+id+']').attr('data-seller-id'));
    }
    addFavorite(id, cb);
  }
}

/**
 * send notice that the listing has been saved to favorites
 * @param {number} id - listing id
 * @param {boolean} is - is favorite
 */
function added_to_favorites(id, is) {
  if (is) {
    $("#" + id).css("cursor", "default");
    $("#" + id).html(
      '<a href="' +
        window.MYACCOUNT_URL +
        '/favorite-car">Saved to Favorites</a>'
    );
  } else {
    $("#" + id).html("Unable to save!");
  }
}

$(document).ready(function() {
  // Save Favorite upon returning to page after logging in
  var favUrl = window.location.href.toString().split(window.location.host)[1];
  var favIndex = favUrl.indexOf("add-favorite");
  if (favIndex > -1) {
    var id = favUrl.substr(favIndex + 13, 7),
      sellerId = localStorage.getItem("cars-favorited-" + id);
    // we are expected to favorite something
    // since spotlights and featured are most probably gone
    // we shouldn't check for selector existence
    // but this should work for regular listings as well
    //console.log('page loaded, expect to favorite');
    if (sellerId) {
      dataLayerHelper.enqueue({
        type: "customOnLoad.GA",
        message: "favorited",
        params: {
          adId: id,
          sellerId: localStorage.getItem("cars-favorited-" + id)
        }
      });

      localStorage.clear("cars-favorited-" + id);
    }

    var el = $("." + id + ".save_favorite");
    if (el.length) {
      // this part works for regular listings
      addFavorite(id, function() {
        toggleFavorite(el, false, id);
      });
    } else {
      addFavorite(id);
    }
  }
});

/**
 * Toggle the favorite icon
 * @param {Object} element
 * @param {boolean} isFavorite
 * @param {number} id
 */
function toggleFavorite(element, isFavorite, id) {
  var toToggle = $("." + id + ".save_favorite");
  var weightedHeart = "icon--weighted-heart";
  var classList, emptyHeart;

  //toggle svgs too
  if ($("." + id + ".save_favorite.heart-filled.hidden").length === 1) {
    $("." + id + ".save_favorite.heart-filled").removeClass("hidden");
    $("." + id + ".save_favorite.heart-weighted").addClass("hidden");
  } else {
    $("." + id + ".save_favorite.heart-filled").addClass("hidden");
    $("." + id + ".save_favorite.heart-weighted").removeClass("hidden");
  }

  for (var i = 0; i < toToggle.length; i++) {
    classList = toToggle[i].classList;
    emptyHeart = toToggle[i].getAttribute
      ? toToggle[i].getAttribute("data-empty-heart")
      : toToggle[i].attr("data-empty-heart");
    if (
      isFavorite &&
      classList.contains(weightedHeart) &&
      !classList.contains(emptyHeart)
    ) {
      classList.remove(weightedHeart);
      classList.add(emptyHeart);
    } else if (
      !isFavorite &&
      !classList.contains(weightedHeart) &&
      classList.contains(emptyHeart)
    ) {
      classList.remove(emptyHeart);
      classList.add(weightedHeart);
    }
  }
}
